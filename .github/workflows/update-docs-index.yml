name: Update Documentation Index

on:
  push:
    branches: [main, master]
    paths:
      - "docs/**/*.md"
      - "Next/**/*.md"
      - "React/**/*.md"
      - "Others/**/*.md"
      - ".github/workflows/update-docs-index.yml"
  pull_request:
    branches: [main, master]
    paths:
      - "docs/**/*.md"
      - "React/**/*.md"
      - "Next/**/*.md"
      - "Others/**/*.md"

permissions:
  contents: write
  pull-requests: write

jobs:
  update-docs-index:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug file structure
        run: |
          echo "=== Repository structure ==="
          find . -name "*.md" -type f | head -20
          echo ""
          echo "=== React folder contents ==="
          if [ -d "React" ]; then
            ls -la React/
            echo "React .md files:"
            find React -name "*.md" -type f | head -10
          else
            echo "React folder not found"
          fi
          echo ""
          echo "=== Next folder contents ==="  
          if [ -d "Next" ]; then
            ls -la Next/
            echo "Next .md files:"
            find Next -name "*.md" -type f | head -10
          else
            echo "Next folder not found"
          fi
          echo ""
          echo "=== Others folder contents ==="
          if [ -d "Others" ]; then
            ls -la Others/
            echo "Others .md files:"
            find Others -name "*.md" -type f | head -10
          else
            echo "Others folder not found"
          fi
          echo ""
          echo "=== docs folder contents ==="
          if [ -d "docs" ]; then
            ls -la docs/
            echo "docs .md files:"
            find docs -name "*.md" -type f | head -10
          else
            echo "docs folder not found"
          fi

      - name: Generate documentation index
        run: |
          INDEX_FILE="temp_docs_index.md"

          echo "## üìö Documentation" > $INDEX_FILE
          echo "" >> $INDEX_FILE

          # React Î¨∏ÏÑú
          if [ -d "React" ] && [ "$(find React -name "*.md" -type f | wc -l)" -gt 0 ]; then
            echo "### üìñ React" >> $INDEX_FILE
            echo "" >> $INDEX_FILE
            
            find React -name "*.md" -type f | sort | while read file; do
              title=$(head -20 "$file" | grep -m 1 "^# " | sed 's/^# //' 2>/dev/null || basename "$file" .md)
              
              if [ -z "$title" ]; then
                title=$(basename "$file" .md)
              fi
              
              echo "- [$title](./$file)" >> $INDEX_FILE
            done
            echo "" >> $INDEX_FILE
          fi

          # Next Î¨∏ÏÑú
          if [ -d "Next" ] && [ "$(find Next -name "*.md" -type f | wc -l)" -gt 0 ]; then
            echo "### üöÄ Next" >> $INDEX_FILE
            echo "" >> $INDEX_FILE
            
            find Next -name "*.md" -type f | sort | while read file; do
              title=$(head -20 "$file" | grep -m 1 "^# " | sed 's/^# //' 2>/dev/null || basename "$file" .md)
              
              if [ -z "$title" ]; then
                title=$(basename "$file" .md)
              fi
              
              echo "- [$title](./$file)" >> $INDEX_FILE
            done
            echo "" >> $INDEX_FILE
          fi

          # Others Î¨∏ÏÑú
          if [ -d "Others" ] && [ "$(find Others -name "*.md" -type f | wc -l)" -gt 0 ]; then
            echo "### üìù Others" >> $INDEX_FILE
            echo "" >> $INDEX_FILE
            
            find Others -name "*.md" -type f | sort | while read file; do
              title=$(head -20 "$file" | grep -m 1 "^# " | sed 's/^# //' 2>/dev/null || basename "$file" .md)
              
              if [ -z "$title" ]; then
                title=$(basename "$file" .md)
              fi
              
              echo "- [$title](./$file)" >> $INDEX_FILE
            done
            echo "" >> $INDEX_FILE
          fi

          # docs Ìè¥Îçî (Í∏∞Ï°¥ docs Ìè¥ÎçîÍ∞Ä ÏûàÎã§Î©¥)
          if [ -d "docs" ] && [ "$(find docs -name "*.md" -type f | wc -l)" -gt 0 ]; then
            echo "### üìã Documentation" >> $INDEX_FILE
            echo "" >> $INDEX_FILE
            
            find docs -name "*.md" -type f | sort | while read file; do
              title=$(head -20 "$file" | grep -m 1 "^# " | sed 's/^# //' 2>/dev/null || basename "$file" .md)
              
              if [ -z "$title" ]; then
                title=$(basename "$file" .md)
              fi
              
              echo "- [$title](./$file)" >> $INDEX_FILE
            done
            echo "" >> $INDEX_FILE
          fi

          # Í∏∞ÌÉÄ Ï§ëÏöî Î¨∏ÏÑúÎì§
          echo "### üìã Other Documents" >> $INDEX_FILE
          echo "" >> $INDEX_FILE

          for file in CONTRIBUTING.md CHANGELOG.md LICENSE.md CODE_OF_CONDUCT.md; do
            if [ -f "$file" ]; then
              title=$(head -20 "$file" | grep -m 1 "^# " | sed 's/^# //' 2>/dev/null || basename "$file" .md)
              if [ -z "$title" ]; then
                title=$(basename "$file" .md)
              fi
              echo "- [$title](./$file)" >> $INDEX_FILE
            fi
          done

          echo "Generated documentation index:"
          cat $INDEX_FILE
          echo ""
          echo "=== Final verification ==="
          echo "Total .md files found:"
          find . -name "*.md" -type f | wc -l
          echo "Index file size:"
          wc -l $INDEX_FILE

      - name: Update README.md
        run: |
          INDEX_FILE="temp_docs_index.md"

          if [ ! -f "README.md" ]; then
            echo "README.md not found, creating new one"
            echo "# Project Documentation" > README.md
            echo "" >> README.md
            echo "<!-- DOCS_INDEX_START -->" >> README.md
            echo "<!-- DOCS_INDEX_END -->" >> README.md
          fi

          if ! grep -q "<!-- DOCS_INDEX_START -->" README.md; then
            echo "" >> README.md
            echo "<!-- DOCS_INDEX_START -->" >> README.md
            echo "<!-- DOCS_INDEX_END -->" >> README.md
          fi

          awk '
            /<!-- DOCS_INDEX_START -->/ { 
              print $0
              system("cat '$INDEX_FILE'")
              skip=1
              next
            }
            /<!-- DOCS_INDEX_END -->/ { 
              skip=0
            }
            !skip
          ' README.md > README_new.md

          mv README_new.md README.md
          rm $INDEX_FILE

          echo "Updated README.md with new documentation index"

      - name: Generate and add changelog to README
        run: |
          CHANGELOG_SECTION="temp_changelog.md"

          echo "" > $CHANGELOG_SECTION
          echo "## üìù Change Log" >> $CHANGELOG_SECTION
          echo "" >> $CHANGELOG_SECTION

          # ÏµúÍ∑º 20Í∞ú Ïª§Î∞ã Í∞ÄÏ†∏Ïò§Í∏∞ (Î¨∏ÏÑú ÏóÖÎç∞Ïù¥Ìä∏ Ïª§Î∞ã Ï†úÏô∏)
          git log --oneline -20 --pretty=format:"%h|%cd|%s|%an" --date=format:"%Y-%m-%d %H:%M" \
            --grep="Auto-update documentation" --invert-grep > commits.txt

          # ÎÇ†ÏßúÎ≥ÑÎ°ú Í∑∏Î£πÌôîÌïòÏó¨ Ï∂úÎ†•
          current_date=""

          while IFS='|' read -r hash date message author; do
            commit_date=$(echo "$date" | cut -d' ' -f1)
            commit_time=$(echo "$date" | cut -d' ' -f2)
            
            # ÏÉàÎ°úÏö¥ ÎÇ†ÏßúÏù∏ Í≤ΩÏö∞ Ìó§Îçî Ï∂îÍ∞Ä
            if [ "$commit_date" != "$current_date" ]; then
              if [ -n "$current_date" ]; then
                echo "" >> $CHANGELOG_SECTION
              fi
              echo "### üìÖ $commit_date" >> $CHANGELOG_SECTION
              echo "" >> $CHANGELOG_SECTION
              current_date="$commit_date"
            fi
            
            # Ïª§Î∞ã Ï†ïÎ≥¥ Ï∂îÍ∞Ä (Î©îÏãúÏßÄ Í∏∏Ïù¥ Ï†úÌïú)
            short_message=$(echo "$message" | cut -c1-80)
            if [ ${#message} -gt 80 ]; then
              short_message="${short_message}..."
            fi
            
            echo "- **$commit_time** [\`$hash\`](https://github.com/${{ github.repository }}/commit/$hash) $short_message" >> $CHANGELOG_SECTION
            echo "  *by $author*" >> $CHANGELOG_SECTION
            
          done < commits.txt

          # ÌÜµÍ≥Ñ Ï†ïÎ≥¥ Ï∂îÍ∞Ä
          echo "" >> $CHANGELOG_SECTION
          echo "### üìä ÌîÑÎ°úÏ†ùÌä∏ ÌÜµÍ≥Ñ" >> $CHANGELOG_SECTION
          echo "" >> $CHANGELOG_SECTION

          total_commits=$(git rev-list --count HEAD)
          contributors=$(git log --format='%an' | sort -u | wc -l)
          last_update=$(date '+%Y-%m-%d %H:%M:%S')

          echo "- **Ï¥ù Ïª§Î∞ã Ïàò**: $total_commits" >> $CHANGELOG_SECTION
          echo "- **Í∏∞Ïó¨Ïûê Ïàò**: $contributors" >> $CHANGELOG_SECTION
          echo "- **ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏**: $last_update" >> $CHANGELOG_SECTION

      - name: Update README with changelog
        run: |
          CHANGELOG_SECTION="temp_changelog.md"

          # CHANGELOG ÏÑπÏÖòÏù¥ ÏóÜÏúºÎ©¥ Ï∂îÍ∞Ä
          if ! grep -q "<!-- CHANGELOG_START -->" README.md; then
            echo "" >> README.md
            echo "<!-- CHANGELOG_START -->" >> README.md
            echo "<!-- CHANGELOG_END -->" >> README.md
          fi

          # CHANGELOG ÏÑπÏÖò ÏóÖÎç∞Ïù¥Ìä∏
          awk '
            /<!-- CHANGELOG_START -->/ { 
              print $0
              system("cat '$CHANGELOG_SECTION'")
              skip=1
              next
            }
            /<!-- CHANGELOG_END -->/ { 
              skip=0
            }
            !skip
          ' README.md > README_temp.md

          mv README_temp.md README.md
          rm $CHANGELOG_SECTION commits.txt

          echo "Updated README.md with changelog"

      - name: Check for changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.email "abgoeun3339@gmail.com"
          git config --local user.name "goeun23"
          git add README.md
          git commit -m "üìö Auto-update documentation index and changelog"
          git push
